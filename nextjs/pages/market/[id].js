import { BetArea } from "@/components/BetArea/BetArea";
import ChartContainer from "@/components/ChartContainer";
import PageLoading from "@/components/LoadingPage/PageLoading";
import { BiconomyAccountContext } from "@/contexts/BiconomyAccountContext";
import { LoadingContext } from "@/contexts/LoadingContext";
import moment from "moment";
import dynamic from "next/dynamic";
import Head from "next/head";
import Img from "next/image";
import { useRouter } from "next/router";
import { Suspense, useCallback, useContext, useEffect, useState } from "react";

/** TODO LIST:
 1. Return back button
 2. Add loading
 3. Add error handling
 4. Add chart
 5. update bet button
 6. 下注後，要更新資料
 7. 顯示資料 
 8. 將此頁移到 index.js */

const BiconomyNavbar = dynamic(() => import("../../components/BiconomyWallet").then((res) => res.default), {
    ssr: false
});

const MarketTitle = (props) => {
    const { title, endTimestamp, totalAmount } = props;
    const endTime = endTimestamp ? endTimestamp.toLocaleString() : "N/A";
    const totalSureAmount = `${totalAmount} SURE`;

    return (
        <div className="p-6 rounded-lg flex flex-row justify-start border border-gray-300">
            <div className="flex flex-row">
                <div className="h-w-15 pr-4">
                    <Img src="/placeholder.jpg" alt="placeholder" className="rounded-full" width={55} height={55} />
                </div>
                <div className="flex flex-col justify-start w-1/2 space-y-1">
                    <span className="text-lg font-semibold whitespace-nowrap">{title}</span>
                </div>
            </div>
            <div className="flex flex-row items-center space-x-4 ml-3">
                <div className="flex flex-col justify-start bg-gray-100 p-3">
                    <span className="text-xs font-light text-gray-500 whitespace-nowrap">Market Ends on</span>
                    <span className="text-base font-semibold text-black whitespace-nowrap">{endTime}</span>
                </div>
                <div className="flex flex-col justify-start bg-gray-100 p-3">
                    <span className="text-xs font-light text-gray-500 whitespace-nowrap">Total Volume</span>
                    <span className="text-base font-semibold text-black whitespace-nowrap">{totalSureAmount}</span>
                </div>
            </div>
        </div>
    );
};

const MarketDescription = (props) => {
    const { description, resolverUrl } = props;
    return (
        <div className="w-2/3 flex flex-col">
            <span className="text-base font-semibold py-3">Description</span>
            {description && <span>{description}</span>}
            <span className="text-base my-3 py-2 bg-gray-100 rounded-xl px-3">
                Resolution Source :{" "}
                <a className="text-blue-700" href={resolverUrl}>
                    {resolverUrl}
                </a>
            </span>
        </div>
    );
};

export default function Detail() {
    const router = useRouter();
    const { id } = router.query;
    const { account, predictionWorldContract } = useContext(BiconomyAccountContext);
    const { isPageLoading, setIsPageLoading } = useContext(LoadingContext);

    const [market, setMarket] = useState({
        title: "title of market",
        endTimestamp: "1681681545",
        totalAmount: 0,
        totalYesAmount: 0,
        totalNoAmount: 0,
        description: "",
        resolverUrl: null
    });

    const getMarket = useCallback(
        async (id, predictionWorldContract) => {
            try {
                const market = await predictionWorldContract.markets(id);
                const date = moment.unix(market.info.endTimestamp / 1000).format("MMMM D, YYYY");
                setMarket({
                    title: market.info.question,
                    endTimestamp: date,
                    totalAmount: market.totalAmount,
                    totalYesAmount: market.totalYesAmount,
                    totalNoAmount: market.totalNoAmount,
                    description: market.info.description,
                    resolverUrl: market.info.resolverUrl
                });
            } catch (error) {
                console.error(`Error getting market detail, ${error}`);
            }
        },
        [id, predictionWorldContract]
    );

    useEffect(() => {
        if (id && predictionWorldContract) {
            getMarket(id, predictionWorldContract);
        }
    }, [router.isReady, account, getMarket]);

    return (
        <div className="flex flex-col justify-center items-center h-full">
            <PageLoading />
            {/* TODO: 返回功能 */}
            <Head>
                <title>Prediction World</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Suspense fallback={<div>Loading...</div>}>
                <BiconomyNavbar />
            </Suspense>
            {!isPageLoading && (
                <div className="w-full flex flex-col sm:flex-row py-4 max-w-5xl">
                    <div className="w-full flex flex-col pt-1">
                        {/* market title */}
                        <MarketTitle title={market?.title} endTimestamp={market?.endTimestamp} totalAmount={market?.totalAmount} />
                        {/* market container */}
                        <div className="flex flex-col space-y-3">
                            <div className="w-full flex flex-row mt-5">
                                {/* TODO: Market 的Yes No 詳細資料 */}
                                <div className="w-2/3 border rounded-lg p-1 pb-4 border-gray-300 mr-2">
                                    <ChartContainer questionId={id} />
                                </div>

                                {/* 下注區 */}
                                <BetArea id={id} market={market} />
                            </div>
                        </div>
                        {/* Market Description */}
                        <MarketDescription description={market?.description} resolverUrl={market?.resolverUrl} />
                    </div>
                </div>
            )}
        </div>
    );
}
