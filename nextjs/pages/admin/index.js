import Head from "next/head";
import Link from "next/link";
import { Suspense, useContext, useState, useEffect, useCallback } from "react";
import { ethers } from "ethers";
import dynamic from "next/dynamic";


import { BiconomyAccountContext } from "@/contexts/BiconomyAccountContext";

const BiconomyNavbar = dynamic(
    () => import("../../components/BiconomyNavbar").then((res) => res.default),
    {
        ssr: false,
    }
);

export default function Admin() {
    const [submitButtonText, setSubmitButtonText] = useState("Create Market");
    const [balance, setBalance] = useState(0);
    const [title, setTitle] = useState("");
    const [description, setDescription] = useState("");
    const [resolverUrl, setResolverUrl] = useState("");
    const [timestamp, setTimestamp]= useState(Date());
    const { predictionWorldContract, sureTokenContract, account } = useContext(BiconomyAccountContext);

    const getBalance = useCallback(async () => {
        try {
            if (!account) {
                return;
            }
            let balance = await sureTokenContract.balanceOf(account);
            setBalance(ethers.utils.commify(balance));
        } catch (error) {
            console.log(`Error getting balance, ${error}`);
        }
    }, [account]);

    const handleSubmit = async () => {
        try {
            setSubmitButtonText("Creating");
            await predictionWorldContract.createMarket(
                title,
                "",
                description,
                resolverUrl,
                timestamp
            );
            setSubmitButtonText("Create Market");
        } catch (error) {
            console.log(`Error creating market: ${error}`);
        }
        /*
        try {
            setSubmitButtonText("Creating");
            console.log(`We got here`);
            const { ethereum } = window;
            const provider = new ethers.providers.Web3Provider(ethereum);
            const signer = provider.getSigner();
            const predictionWorldContract = new ethers.Contract(
                predictionWorld3Address,
                PredictionWorld.abi,
                signer
            );

            await predictionWorldContract.createMarket(
                title,
                "", // just a fake string for image hash
                description,
                resolverUrl,
                timestamp
            );
            setSubmitButtonText("Create Market");
        } catch (error) {
            console.log(`Error creating market: ${error}`);
        }
        */
    }

    useEffect(() => {
        getBalance();
    }, [account, getBalance]);

    return (
        <>
            <div className="flex flex-col justify-center items-center h-full p-5">
                <Head>
                    <title>Prediction World</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                <Suspense fallback={<div></div>}>
                    <BiconomyNavbar />
                </Suspense>
                <main className="w-full flex flex-col py-4 max-w-5xl pb-6">
                    <Link href="/admin/markets" className="mt-5 rounded-lg py-3 text-center w-full bg-blue-700 text-white font-bold mb-5">
                        See All Markets
                    </Link>
                    You have: {balance} SURE tokens

                    <div className="w-full flex flex-col pt-1 border border-gray-300 p-5 rounded-lg ">
                        <span className="text-lg font-semibold mt-4">Add New Market</span>
                        <span className="text-lg font mt-6 mb-1">Market Title</span>
                        <input
                            type="input"
                            name="title"
                            value={title}
                            onChange={(e) => setTitle(e.target.value)}
                            className="w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                            placeholder="Title"
                            autoComplete="off"
                        />
                        <span className="text-lg font mt-6 mb-1">Market Description</span>
                        <textarea
                            name="description"
                            value={description}
                            onChange={(e) => setDescription(e.target.value)}
                            className="w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                            placeholder="Description"
                            autoComplete="off"
                        >
                        </textarea>
                        <span className="text-lg font mt-6 mb-1">Resolve URL</span>
                        <input
                            type="input"
                            name="resolverUrl"
                            value={resolverUrl}
                            onChange={(e) => setResolverUrl(e.target.value)}
                            className="w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                            placeholder="URL"
                            autoComplete="off"
                        />
                        <span className="text-lg font mt-6 mb-1">End Date</span>
                        <input
                            type="date"
                            name="timestamp"
                            // value={timestamp}
                            onChange={(e) => {
                                setTimestamp(e.target.valueAsDate?.getTime());
                            }}
                            className="w-full py-3 px-3 text-base text-gray-700 bg-gray-100 rounded-md focus:outline-none"
                            autoComplete="off"
                        />
                        <button
                            className="mt-5 rounded-lg py-3 text-center w-full bg-green-500 text-white font-bold"
                            onClick={() => {
                            handleSubmit();
                            }}
                        >
                            {submitButtonText}
                        </button>
                    </div>
                </main>
            </div>
        </>
    );
}