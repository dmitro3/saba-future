import Head from "next/head";
import { useState, useEffect } from "react";
import { ethers } from "ethers";

import styles from "../styles/Home.module.css";
import Navbar from "@/components/Navbar";
import { predictionWorld3Address } from "@/config";
import PredictionWorld from "../utils/abis/PredictionWorld3.json";



export default function Portfolio() {
    const [portfolioValue, setPortfolioValue] = useState(0);
    

    const getMarkets = async () => {
        try {
            const { ethereum } = window;
            const provider = new ethers.providers.Web3Provider(ethereum);
            const signer = provider.getSigner();
            const predictionWorldContract = new ethers.Contract(
                predictionWorld3Address,
                PredictionWorld.abi,
                signer
            );

            const accounts = await ethereum.request({ method: "eth_accounts" });
            const account = accounts[0];

            let marketCount = await predictionWorldContract.totalMarkets();
            let markets = [];
            for (let i = 0; i < marketCount; i++) {
                let market = await predictionWorldContract.markets(i);
                markets.push({
                    id: market.id,
                    title: market.question,
                    imageHash: "", // temp holder
                    totalAmount: market.totalAmount,
                    totalYesAmount: market.totalYesAmount,
                    totalNoAmount: market.totalNoAmount,
                    hasResolved: market.marketClosed,
                    endTimestamp: market.endTimestamp,
                });
            }
            console.log(`markets size: ${markets.length}`);

            let personalizedBetInfo = [];
            let totalBetAmount = 0;
            for (let i = 0; i < markets.length; i++) {
                let marketBets = await predictionWorldContract.getBets(i);
                marketBets["0"].forEach((bet) => {
                    if (bet[0].toLowerCase() == account.toLowerCase()) {
                        personalizedBetInfo.push({
                            id: i.toString(),
                            yesAmount: bet[1].toString(),
                            timestamp: bet[2].toString(),
                        });
                        totalBetAmount += parseInt(bet[1]);
                    }
                });
                marketBets["1"].forEach((bet) => {
                    if (bet[0].toLowerCase() == account.toLowerCase()) {
                        
                    }
                });
            }

        } catch (error) {
            console.log(`Error getting markets, ${error}`);
        }
    }

    useEffect(() => {
        getMarkets();
    }, []);

    return (
        <div className={styles.container}>
            <Head>
                <title>Prediction World</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Navbar />
            <main className="w-full flex flex-col sm:flex-row flex-wrap sm:flex-nowrap py-4 flex-grow max-w-5xl">
                <div className="w-full flex flex-col pt-1">
                    <div className="p-10 bg-blue-700 rounded-lg flex flex-row justify-evenly">
                        <div className="flex flex-col items-center">
                            <h1 className="text-white opacity-50 text-lg">Portfolio Value</h1>
                            <h1 className="text-white text-4xl font-bold">

                            </h1>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    );
}